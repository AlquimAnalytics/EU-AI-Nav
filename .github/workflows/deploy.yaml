name: Deploy to AWS

on:
    workflow_dispatch:
    push:
        branches:
          - main

env:
    AWS_REGION: eu-central-1
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}
    PUBLIC_IP: ${{ secrets.PUBLIC_IP }}
    OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    DOCKER_REPOSITORY: eu-ai-nav
    BACKEND_TAG: backend-${{ github.ref_name }}
    FRONTEND_TAG: frontend-${{ github.ref_name }}

jobs:
    publish-to-ecr:
        runs-on: ubuntu-latest

        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Login to AWS ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          
          - name: Build and push backend docker image
            env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            run: |-
                # Delete old backend image if exists
                aws ecr batch-delete-image --repository-name $DOCKER_REPOSITORY --image-ids imageTag=$BACKEND_TAG --region $AWS_REGION || true
                
                # Build and push backend
                docker build -f Docker/Dockerfile.backend -t $REGISTRY/$DOCKER_REPOSITORY:$BACKEND_TAG .
                docker push $REGISTRY/$DOCKER_REPOSITORY:$BACKEND_TAG

          - name: Build and push frontend docker image
            env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            run: |-
                # Delete old frontend image if exists
                aws ecr batch-delete-image --repository-name $DOCKER_REPOSITORY --image-ids imageTag=$FRONTEND_TAG --region $AWS_REGION || true
                
                # Build and push frontend
                docker build -f Docker/Dockerfile.frontend -t $REGISTRY/$DOCKER_REPOSITORY:$FRONTEND_TAG .
                docker push $REGISTRY/$DOCKER_REPOSITORY:$FRONTEND_TAG

    pull-from-ecr-and-deploy:
        needs: publish-to-ecr
        runs-on: ubuntu-latest

        steps:
          - name: Login to AWS ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          
          - name: Deploy docker images to EC2
            env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            uses: appleboy/ssh-action@master
            with:
              host: ${{ env.PUBLIC_IP }}
              username: ec2-user
              key: ${{ env.PRIVATE_SSH_KEY }}
              envs: PRIVATE_SSH_KEY, REGISTRY, DOCKER_REPOSITORY, BACKEND_TAG, FRONTEND_TAG, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, OPENAI_API_KEY
              command_timeout: 15m
              script: |-
                echo "Deploying RAG Docker images to EC2..."
                
                # Login to ECR
                echo $(aws ecr get-login-password --region $AWS_REGION) | sudo docker login --username AWS --password-stdin $REGISTRY
            
                # Stop and remove old containers
                sudo docker stop rag-backend || true
                sudo docker stop rag-frontend || true
                sudo docker rm rag-backend || true
                sudo docker rm rag-frontend || true
                sudo docker system prune -a -f
            
                # Pull new Docker images
                sudo docker pull $REGISTRY/$DOCKER_REPOSITORY:$BACKEND_TAG
                sudo docker pull $REGISTRY/$DOCKER_REPOSITORY:$FRONTEND_TAG
                
                # Create network
                sudo docker network create rag-network || true

                # Run backend container
                sudo docker run -d \
                  --name rag-backend \
                  --restart=unless-stopped \
                  --network rag-network \
                  --volume /home/ec2-user/data:/app/data \
                  -e OPENAI_API_KEY=$OPENAI_API_KEY \
                  -p 8000:8000 \
                  $REGISTRY/$DOCKER_REPOSITORY:$BACKEND_TAG

                # Run frontend container
                sudo docker run -d \
                  --name rag-frontend \
                  --restart=unless-stopped \
                  --network rag-network \
                  -p 3000:3000 \
                  $REGISTRY/$DOCKER_REPOSITORY:$FRONTEND_TAG
              